'use client'

import { useState } from 'react'
import { useAuth } from '@/components/auth/AuthProvider'
import AuthForm from '@/components/auth/AuthForm'
import ExerciseSettings from '@/components/math/ExerciseSettings'
import ExerciseSession from '@/components/math/ExerciseSession'
import type { ExerciseConfig } from '@/lib/math-generator'

export default function HomePage() {
  const { user, loading, signOut } = useAuth()
  const [authMode, setAuthMode] = useState<'signin' | 'signup'>('signin')
  const [showAuth, setShowAuth] = useState(false)
  const [exerciseConfig, setExerciseConfig] = useState<ExerciseConfig | null>(null)

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p>ƒêang t·∫£i...</p>
        </div>
      </div>
    )
  }

  // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã trang ch·ªß v·ªõi n√∫t ƒëƒÉng nh·∫≠p
  if (!user && !showAuth) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary-50 to-primary-100">
        <div className="container mx-auto px-4 py-16">
          <div className="text-center">
            <h1 className="text-5xl font-bold text-gray-900 mb-6">
              üßÆ Luy·ªán T·∫≠p To√°n H·ªçc
            </h1>
            <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
              ·ª®ng d·ª•ng gi√∫p h·ªçc sinh luy·ªán t·∫≠p c√°c ph√©p t√≠nh c·ªông, tr·ª´, nh√¢n, chia 
              v·ªõi giao di·ªán th√¢n thi·ªán v√† t√≠nh nƒÉng ƒëa d·∫°ng
            </p>
            
            <div className="space-y-4">
              <button
                onClick={() => setShowAuth(true)}
                className="btn-primary text-lg px-8 py-3"
              >
                B·∫Øt ƒë·∫ßu luy·ªán t·∫≠p
              </button>
              
              <div className="text-sm text-gray-500">
                ƒêƒÉng nh·∫≠p ƒë·ªÉ l∆∞u ti·∫øn ƒë·ªô v√† xem l·ªãch s·ª≠ b√†i t·∫≠p
              </div>
            </div>
          </div>
          
          <div className="mt-16 grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
            <div className="card text-center">
              <div className="text-4xl mb-4">‚ûï</div>
              <h3 className="text-xl font-semibold mb-2">Ph√©p C·ªông</h3>
              <p className="text-gray-600">
                Luy·ªán t·∫≠p ph√©p c·ªông trong ph·∫°m vi 10, 20, 100 v·ªõi c√°c d·∫°ng c√≥ nh·ªõ v√† kh√¥ng nh·ªõ
              </p>
            </div>
            
            <div className="card text-center">
              <div className="text-4xl mb-4">‚ûñ</div>
              <h3 className="text-xl font-semibold mb-2">Ph√©p Tr·ª´</h3>
              <p className="text-gray-600">
                Th·ª±c h√†nh ph√©p tr·ª´ v·ªõi c√°c s·ªë c√≥ nhi·ªÅu ch·ªØ s·ªë kh√°c nhau
              </p>
            </div>
            
            <div className="card text-center">
              <div className="text-4xl mb-4">‚úñÔ∏è</div>
              <h3 className="text-xl font-semibold mb-2">Ph√©p Nh√¢n & Chia</h3>
              <p className="text-gray-600">
                Luy·ªán t·∫≠p ph√©p nh√¢n v√† chia v·ªõi giao di·ªán b·∫£ng t√≠nh chi ti·∫øt
              </p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω
  if (!user && showAuth) {
    return (
      <AuthForm
        mode={authMode}
        onSuccess={() => setShowAuth(false)}
        onSwitchMode={() => setAuthMode(authMode === 'signin' ? 'signup' : 'signin')}
      />
    )
  }

  // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p v√† ch∆∞a ch·ªçn b√†i t·∫≠p
  if (user && !exerciseConfig) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Ch√†o m·ª´ng, {user.full_name}!
              </h1>
              <p className="text-gray-600">Ch·ªçn b√†i t·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu luy·ªán t·∫≠p</p>
            </div>
            <button
              onClick={signOut}
              className="btn-secondary"
            >
              ƒêƒÉng xu·∫•t
            </button>
          </div>
          
          <ExerciseSettings onStart={setExerciseConfig} />
        </div>
      </div>
    )
  }

  // Hi·ªÉn th·ªã b√†i t·∫≠p
  if (exerciseConfig) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 py-8">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-gray-900">
              B√†i t·∫≠p: {getOperationName(exerciseConfig.operation)}
            </h1>
            <button
              onClick={() => setExerciseConfig(null)}
              className="btn-secondary"
            >
              Quay l·∫°i
            </button>
          </div>
          
          <ExerciseSession
            config={exerciseConfig}
            onComplete={() => setExerciseConfig(null)}
          />
        </div>
      </div>
    )
  }

  return null
}

function getOperationName(operation: string): string {
  switch (operation) {
    case 'addition':
      return 'Ph√©p C·ªông'
    case 'subtraction':
      return 'Ph√©p Tr·ª´'
    case 'multiplication':
      return 'Ph√©p Nh√¢n'
    case 'division':
      return 'Ph√©p Chia'
    default:
      return 'B√†i T·∫≠p'
  }
}
